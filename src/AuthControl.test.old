import React from 'react';
import { mount } from 'enzyme';
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import { Provider } from 'react-redux';
import AuthControl from './AuthControl';
import firebase from 'firebase';
import StyledFirebaseAuth from "react-firebaseui/StyledFirebaseAuth";

const mockStore = configureMockStore([thunk]);
const store = mockStore();
const FirebaseAuthProps = {};

jest.mock('firebase', () => {
  const auth = jest.fn();
  const mAuth = { signInWithRedirect: jest.fn() };
  // @ts-ignore
  auth.GoogleAuthProvider = jest.fn();
  // @ts-ignore
  auth.Auth = jest.fn(() => mAuth);
  return { auth };
});

describe('<AuthControl />', () => {
  afterEach(() => {
    jest.resetAllMocks();
  });
  test('simulate click button', () => {
    // @ts-ignore
    firebase.auth.mockImplementation(() => new firebase.auth.Auth());

    // var uiConfig = {
    //   signInFlow: "popup",
    //   signInOptions: [
    //     firebase.auth.GoogleAuthProvider.PROVIDER_ID
    //   ],
    //   callback: {
    //     signInSuccess: () => false
    //   }
    // }

    // const withProvider = (
    //   <StyledFirebaseAuth
    //     uiConfig={uiConfig}
    //     firebaseAuth={firebase.auth()}
    //   />
    // );


        const withProvider = (
          <Provider store={store}>
            <AuthControl.WrappedComponent {...FirebaseAuthProps} />
          </Provider>
        );

        const wrapper = mount(withProvider);
//        expect(wrapper.find('button').text()).toBe('Login with Google');
        wrapper.find('button').simulate('click');
        expect(firebase.auth.GoogleAuthProvider).toBeCalledTimes(1);
        expect(firebase.auth).toBeCalledTimes(1);
        expect(firebase.auth().signInWithRedirect).toBeCalledTimes(1);

//    const wrapper = mount(withProvider);

//    expect(wrapper.find('button').text()).toBe('Signin with Google');
//    const container = wrapper.find('firebaseui-idp-button');
//    expect(container.length).to.equal(1);

    // const wrapper = mount(<AuthControl />)
    // wrapper.find('button').simulate('click');
    // expect(firebase.auth.GoogleAuthProvider).toBeCalledTimes(1);
    // expect(firebase.auth).toBeCalledTimes(1);
    // expect(firebase.auth().signInWithRedirect).toBeCalledTimes(1);

  });
});
