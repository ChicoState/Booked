{"ast":null,"code":"var _jsxFileName = \"/home/kris/g4/src/DemoApp.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport FullCalendar, { formatDate } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { INITIAL_EVENTS, createEventId } from './event-utils'; //import Moment from 'react-moment';\n\nimport './index.css';\nimport * as firebase from 'firebase';\nimport 'firebase/auth';\nimport TodoApp from './DemoApp'; //var addedEvents = [];\n\nexport default class DemoApp extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      weekendsVisible: true,\n      currentEvents: []\n    };\n\n    this.handleWeekendsToggle = () => {\n      this.setState({\n        weekendsVisible: !this.state.weekendsVisible\n      });\n    };\n\n    this.handleDateSelect = selectInfo => {// let title = prompt('Please enter a new title for your event')\n      // let calendarApi = selectInfo.view.calendar\n      //\n      // calendarApi.unselect() // clear date selection\n      //\n      // if (title) {\n      //   calendarApi.addEvent({\n      //     id: createEventId(),\n      //     title,\n      //     start: selectInfo.startStr,\n      //     end: selectInfo.endStr,\n      //     allDay: selectInfo.allDay\n      //   })\n      // }\n    };\n\n    this.handleEventClick = clickInfo => {//    if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n      //      clickInfo.event.remove()\n      //    }\n    };\n\n    this.handleEvents = events => {//    this.setState({\n      //      currentEvents: events\n      //    })\n    };\n  }\n\n  render() {\n    const itemsRef = firebase.database().ref('text');\n    itemsRef.on('value', snapshot => {\n      let items = snapshot.val();\n      let newState = [];\n\n      for (let item in items) {\n        newState.push({\n          id: items[item].id,\n          text: items[item].text\n        });\n        let todayStr = new Date().toISOString().replace(/T.*$/, ''); // YYYY-MM-DD of today\n\n        const dateInMillis = items[item].id;\n        var date = new Date(dateInMillis).toDateString() + ' at ' + new Date(dateInMillis).toLocaleTimeString(); //var date = new Date(dateInMillis).toLocaleDateString();\n        //date = Moment.moment(date,'YYYY-MM-DD');\n        //let dayStr = date.replace(/T.*$/, '');\n\n        let dayStr = date; //       let dayStr = Intl.DateTimeFormat('en-US',{\n        // year: 'numeric',\n        // month: 'short',\n        // day: '2-digit' }).format(date);\n        //alert(dayStr);\n        //alert(date);\n\n        var addEvents = {\n          id: createEventId(),\n          title: items[item].text,\n          start: dayStr,\n          end: dayStr + 'T12:00:00'\n        }; //this.state.currentEvents.push(addEvents);\n\n        alert(addEvents.start);\n        alert(todayStr);\n        this.state.currentEvents.push(addEvents); // let title = items[item].text;\n        // let calendarApi = this.view.calendar;\n        // //\n        // // calendarApi.unselect() // clear date selection\n        // //\n        //  if (title) {\n        //    calendarApi.addEvent({\n        //      id: createEventId(),\n        //      title,\n        //      start: items[item].id,\n        //      end: items[item].id + 'T12:00:00'\n        //   });\n        // }\n      }\n\n      ; //alert(this.state.currentEvents.length);\n      //this.setState({\n      //  items: newState\n      //});\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"demo-app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, this.renderSidebar(), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"demo-app-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:3000/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, \"Back to Task Input\"), /*#__PURE__*/React.createElement(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      initialView: \"dayGridMonth\",\n      editable: true,\n      selectable: true,\n      selectMirror: true,\n      dayMaxEvents: true,\n      weekends: this.state.weekendsVisible,\n      initialEvents: this.state.currentEvents // alternatively, use the `events` setting to fetch from a feed\n      ,\n      select: this.handleDateSelect,\n      eventContent: renderEventContent // custom render function\n      ,\n      eventClick: this.handleEventClick,\n      eventsSet: this.handleEvents // called after events are initialized/added/changed/removed\n\n      /* you can update a remote database when these fire:\n      eventAdd={function(){}}\n      eventChange={function(){}}\n      eventRemove={function(){}}\n      */\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  renderSidebar() {// return (\n    //   <div className='demo-app-sidebar'>\n    //     <div className='demo-app-sidebar-section'>\n    //       <h2>Instructions</h2>\n    //       <ul>\n    //         <li>Select dates and you will be prompted to create a new event</li>\n    //         <li>Drag, drop, and resize events</li>\n    //         <li>Click an event to delete it</li>\n    //       </ul>\n    //     </div>\n    //     <div className='demo-app-sidebar-section'>\n    //       <label>\n    //         <input\n    //           type='checkbox'\n    //           checked={this.state.weekendsVisible}\n    //           onChange={this.handleWeekendsToggle}\n    //         ></input>\n    //         toggle weekends\n    //       </label>\n    //     </div>\n    //     <div className='demo-app-sidebar-section'>\n    //       <h2>All Events ({this.state.currentEvents.length})</h2>\n    //       <ul>\n    //         {this.state.currentEvents.map(renderSidebarEvent)}\n    //       </ul>\n    //     </div>\n    //   </div>\n    // )\n  }\n\n}\n\nfunction renderEventContent(eventInfo) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, eventInfo.timeText), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, eventInfo.event.title));\n}\n\nfunction renderSidebarEvent(event) {\n  return /*#__PURE__*/React.createElement(\"li\", {\n    key: event.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }\n  }, formatDate(event.start, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  })), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }\n  }, event.title));\n}\n\nfunction gotoTasks() {\n  setTimeout(() => {\n    ReactDOM.render( /*#__PURE__*/React.createElement(TodoApp, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 3\n      }\n    }), document.getElementById('root'));\n  }, 1000);\n}","map":{"version":3,"sources":["/home/kris/g4/src/DemoApp.jsx"],"names":["React","ReactDOM","FullCalendar","formatDate","dayGridPlugin","timeGridPlugin","interactionPlugin","INITIAL_EVENTS","createEventId","firebase","TodoApp","DemoApp","Component","state","weekendsVisible","currentEvents","handleWeekendsToggle","setState","handleDateSelect","selectInfo","handleEventClick","clickInfo","handleEvents","events","render","itemsRef","database","ref","on","snapshot","items","val","newState","item","push","id","text","todayStr","Date","toISOString","replace","dateInMillis","date","toDateString","toLocaleTimeString","dayStr","addEvents","title","start","end","alert","renderSidebar","left","center","right","renderEventContent","eventInfo","timeText","event","renderSidebarEvent","year","month","day","gotoTasks","setTimeout","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,YAAP,IAAuBC,UAAvB,QAAyC,qBAAzC;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,eAA9C,C,CAEA;;AAEA,OAAO,aAAP;AAEA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAO,eAAP;AAEA,OAAOC,OAAP,MAAoB,WAApB,C,CAGA;;AAEA,eAAe,MAAMC,OAAN,SAAsBX,KAAK,CAACY,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAEnDC,KAFmD,GAE3C;AACNC,MAAAA,eAAe,EAAE,IADX;AAENC,MAAAA,aAAa,EAAE;AAFT,KAF2C;;AAAA,SAgInDC,oBAhImD,GAgI5B,MAAM;AAC3B,WAAKC,QAAL,CAAc;AACZH,QAAAA,eAAe,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADjB,OAAd;AAGD,KApIkD;;AAAA,SAsInDI,gBAtImD,GAsI/BC,UAAD,IAAgB,CACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KArJkD;;AAAA,SAuJnDC,gBAvJmD,GAuJ/BC,SAAD,IAAe,CACpC;AACA;AACA;AACG,KA3JkD;;AAAA,SA6JnDC,YA7JmD,GA6JnCC,MAAD,IAAY,CAC7B;AACA;AACA;AACG,KAjKkD;AAAA;;AAOnDC,EAAAA,MAAM,GAAG;AAEP,UAAMC,QAAQ,GAAGhB,QAAQ,CAACiB,QAAT,GAAoBC,GAApB,CAAwB,MAAxB,CAAjB;AAEAF,IAAAA,QAAQ,CAACG,EAAT,CAAY,OAAZ,EAAsBC,QAAD,IAAc;AACjC,UAAIC,KAAK,GAAGD,QAAQ,CAACE,GAAT,EAAZ;AACA,UAAIC,QAAQ,GAAG,EAAf;;AACA,WAAK,IAAIC,IAAT,IAAiBH,KAAjB,EAAwB;AACtBE,QAAAA,QAAQ,CAACE,IAAT,CAAc;AACZC,UAAAA,EAAE,EAAEL,KAAK,CAACG,IAAD,CAAL,CAAYE,EADJ;AAEZC,UAAAA,IAAI,EAAEN,KAAK,CAACG,IAAD,CAAL,CAAYG;AAFN,SAAd;AAIA,YAAIC,QAAQ,GAAG,IAAIC,IAAJ,GAAWC,WAAX,GAAyBC,OAAzB,CAAiC,MAAjC,EAAyC,EAAzC,CAAf,CALsB,CAKuC;;AAC7D,cAAMC,YAAY,GAAIX,KAAK,CAACG,IAAD,CAAL,CAAYE,EAAlC;AACA,YAAIO,IAAI,GAAG,IAAIJ,IAAJ,CAASG,YAAT,EAAuBE,YAAvB,KAAwC,MAAxC,GAAiD,IAAIL,IAAJ,CAASG,YAAT,EAAuBG,kBAAvB,EAA5D,CAPsB,CAQtB;AACA;AACA;;AACA,YAAIC,MAAM,GAAGH,IAAb,CAXsB,CAY5B;AACA;AACA;AACA;AACM;AACA;;AACA,YAAII,SAAS,GACX;AACEX,UAAAA,EAAE,EAAE3B,aAAa,EADnB;AAEEuC,UAAAA,KAAK,EAAEjB,KAAK,CAACG,IAAD,CAAL,CAAYG,IAFrB;AAGEY,UAAAA,KAAK,EAAEH,MAHT;AAIEI,UAAAA,GAAG,EAAEJ,MAAM,GAAG;AAJhB,SADF,CAlBsB,CAyBtB;;AACAK,QAAAA,KAAK,CAACJ,SAAS,CAACE,KAAX,CAAL;AACAE,QAAAA,KAAK,CAACb,QAAD,CAAL;AACA,aAAKxB,KAAL,CAAWE,aAAX,CAAyBmB,IAAzB,CAA8BY,SAA9B,EA5BsB,CA6BtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAAA,OA7CgC,CA8CjC;AAEA;AACA;AACA;AACD,KAnDD;AAoDA,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKK,aAAL,EADH,eAEE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAG,MAAA,IAAI,EAAC,wBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADA,eAEE,oBAAC,YAAD;AACE,MAAA,OAAO,EAAE,CAAC/C,aAAD,EAAgBC,cAAhB,EAAgCC,iBAAhC,CADX;AAEE,MAAA,aAAa,EAAE;AACb8C,QAAAA,IAAI,EAAE,iBADO;AAEbC,QAAAA,MAAM,EAAE,OAFK;AAGbC,QAAAA,KAAK,EAAE;AAHM,OAFjB;AAOE,MAAA,WAAW,EAAC,cAPd;AAQE,MAAA,QAAQ,EAAE,IARZ;AASE,MAAA,UAAU,EAAE,IATd;AAUE,MAAA,YAAY,EAAE,IAVhB;AAWE,MAAA,YAAY,EAAE,IAXhB;AAYE,MAAA,QAAQ,EAAE,KAAKzC,KAAL,CAAWC,eAZvB;AAaE,MAAA,aAAa,EAAE,KAAKD,KAAL,CAAWE,aAb5B,CAa2C;AAb3C;AAcE,MAAA,MAAM,EAAE,KAAKG,gBAdf;AAeE,MAAA,YAAY,EAAEqC,kBAfhB,CAeoC;AAfpC;AAgBE,MAAA,UAAU,EAAE,KAAKnC,gBAhBnB;AAiBE,MAAA,SAAS,EAAE,KAAKE,YAjBlB,CAiBgC;;AAC9B;;;;;AAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFF,CADF;AAgCD;;AAED6B,EAAAA,aAAa,GAAG,CACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AA9HkD;;AAqKrD,SAASI,kBAAT,CAA4BC,SAA5B,EAAuC;AACrC,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,SAAS,CAACC,QAAd,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,SAAS,CAACE,KAAV,CAAgBX,KAApB,CAFF,CADF;AAMD;;AAED,SAASY,kBAAT,CAA4BD,KAA5B,EAAmC;AACjC,sBACE;AAAI,IAAA,GAAG,EAAEA,KAAK,CAACvB,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIhC,UAAU,CAACuD,KAAK,CAACV,KAAP,EAAc;AAACY,IAAAA,IAAI,EAAE,SAAP;AAAkBC,IAAAA,KAAK,EAAE,OAAzB;AAAkCC,IAAAA,GAAG,EAAE;AAAvC,GAAd,CAAd,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIJ,KAAK,CAACX,KAAV,CAFF,CADF;AAMD;;AAED,SAASgB,SAAT,GAAoB;AACpBC,EAAAA,UAAU,CAAC,MAAM;AAAG/D,IAAAA,QAAQ,CAACuB,MAAT,eAClB,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADkB,EAElByC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFkB;AAGhB,GAHM,EAGJ,IAHI,CAAV;AAIC","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom';\nimport FullCalendar, { formatDate } from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport { INITIAL_EVENTS, createEventId } from './event-utils'\n\n//import Moment from 'react-moment';\n\nimport './index.css';\n\nimport * as firebase from 'firebase';\nimport 'firebase/auth';\n\nimport TodoApp from './DemoApp'\n\n\n//var addedEvents = [];\n\nexport default class DemoApp extends React.Component {\n\n  state = {\n    weekendsVisible: true,\n    currentEvents: []\n  }\n\n  render() {\n\n    const itemsRef = firebase.database().ref('text');\n\n    itemsRef.on('value', (snapshot) => {\n      let items = snapshot.val();\n      let newState = [];\n      for (let item in items) {\n        newState.push({\n          id: items[item].id,\n          text: items[item].text,\n        });\n        let todayStr = new Date().toISOString().replace(/T.*$/, ''); // YYYY-MM-DD of today\n        const dateInMillis  = items[item].id;\n        var date = new Date(dateInMillis).toDateString() + ' at ' + new Date(dateInMillis).toLocaleTimeString();\n        //var date = new Date(dateInMillis).toLocaleDateString();\n        //date = Moment.moment(date,'YYYY-MM-DD');\n        //let dayStr = date.replace(/T.*$/, '');\n        let dayStr = date;\n  //       let dayStr = Intl.DateTimeFormat('en-US',{\n  // year: 'numeric',\n  // month: 'short',\n  // day: '2-digit' }).format(date);\n        //alert(dayStr);\n        //alert(date);\n        var addEvents =\n          {\n            id: createEventId(),\n            title: items[item].text,\n            start: dayStr,\n            end: dayStr + 'T12:00:00'\n          };\n        //this.state.currentEvents.push(addEvents);\n        alert(addEvents.start);\n        alert(todayStr);\n        this.state.currentEvents.push(addEvents);\n        // let title = items[item].text;\n        // let calendarApi = this.view.calendar;\n        // //\n        // // calendarApi.unselect() // clear date selection\n        // //\n        //  if (title) {\n        //    calendarApi.addEvent({\n        //      id: createEventId(),\n        //      title,\n        //      start: items[item].id,\n        //      end: items[item].id + 'T12:00:00'\n        //   });\n        // }\n      };\n      //alert(this.state.currentEvents.length);\n\n      //this.setState({\n      //  items: newState\n      //});\n    });\n    return (\n      <div className='demo-app'>\n        {this.renderSidebar()}\n        <div className='demo-app-main'>\n        <a href=\"http://localhost:3000/\">Back to Task Input</a>\n          <FullCalendar\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n            headerToolbar={{\n              left: 'prev,next today',\n              center: 'title',\n              right: 'dayGridMonth,timeGridWeek,timeGridDay'\n            }}\n            initialView='dayGridMonth'\n            editable={true}\n            selectable={true}\n            selectMirror={true}\n            dayMaxEvents={true}\n            weekends={this.state.weekendsVisible}\n            initialEvents={this.state.currentEvents} // alternatively, use the `events` setting to fetch from a feed\n            select={this.handleDateSelect}\n            eventContent={renderEventContent} // custom render function\n            eventClick={this.handleEventClick}\n            eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\n            /* you can update a remote database when these fire:\n            eventAdd={function(){}}\n            eventChange={function(){}}\n            eventRemove={function(){}}\n            */\n          />\n        </div>\n      </div>\n    )\n  }\n\n  renderSidebar() {\n    // return (\n    //   <div className='demo-app-sidebar'>\n    //     <div className='demo-app-sidebar-section'>\n    //       <h2>Instructions</h2>\n    //       <ul>\n    //         <li>Select dates and you will be prompted to create a new event</li>\n    //         <li>Drag, drop, and resize events</li>\n    //         <li>Click an event to delete it</li>\n    //       </ul>\n    //     </div>\n    //     <div className='demo-app-sidebar-section'>\n    //       <label>\n    //         <input\n    //           type='checkbox'\n    //           checked={this.state.weekendsVisible}\n    //           onChange={this.handleWeekendsToggle}\n    //         ></input>\n    //         toggle weekends\n    //       </label>\n    //     </div>\n    //     <div className='demo-app-sidebar-section'>\n    //       <h2>All Events ({this.state.currentEvents.length})</h2>\n    //       <ul>\n    //         {this.state.currentEvents.map(renderSidebarEvent)}\n    //       </ul>\n    //     </div>\n    //   </div>\n    // )\n  }\n\n  handleWeekendsToggle = () => {\n    this.setState({\n      weekendsVisible: !this.state.weekendsVisible\n    })\n  }\n\n  handleDateSelect = (selectInfo) => {\n    // let title = prompt('Please enter a new title for your event')\n    // let calendarApi = selectInfo.view.calendar\n    //\n    // calendarApi.unselect() // clear date selection\n    //\n    // if (title) {\n    //   calendarApi.addEvent({\n    //     id: createEventId(),\n    //     title,\n    //     start: selectInfo.startStr,\n    //     end: selectInfo.endStr,\n    //     allDay: selectInfo.allDay\n    //   })\n    // }\n  }\n\n  handleEventClick = (clickInfo) => {\n//    if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n//      clickInfo.event.remove()\n//    }\n  }\n\n  handleEvents = (events) => {\n//    this.setState({\n//      currentEvents: events\n//    })\n  }\n\n}\n\nfunction renderEventContent(eventInfo) {\n  return (\n    <>\n      <b>{eventInfo.timeText}</b>\n      <i>{eventInfo.event.title}</i>\n    </>\n  )\n}\n\nfunction renderSidebarEvent(event) {\n  return (\n    <li key={event.id}>\n      <b>{formatDate(event.start, {year: 'numeric', month: 'short', day: 'numeric'})}</b>\n      <i>{event.title}</i>\n    </li>\n  )\n}\n\nfunction gotoTasks(){\nsetTimeout(() => {  ReactDOM.render(\n  <TodoApp />,\n  document.getElementById('root')\n); }, 1000);\n}\n"]},"metadata":{},"sourceType":"module"}