{"ast":null,"code":"import * as firebase from 'firebase';\nimport 'firebase/auth'; //export var user;\n\nvar config = {\n  apiKey: \"AIzaSyAbrPremBQusjYoKqKfTcVHwxuw-Q8ikHw\",\n  authDomain: \"booked-8586e.firebaseapp.com\",\n  databaseURL: \"https://booked-8586e.firebaseio.com\",\n  projectId: \"booked-8586e\",\n  storageBucket: \"booked-8586e.appspot.com\",\n  messagingSenderId: \"24720035765\",\n  appId: \"1:24720035765:web:3d57fd5c840b8100c353fc\",\n  measurementId: \"G-20QKEY7V1D\"\n};\nfirebase.initializeApp(config);\nvar provider = new firebase.auth.GoogleAuthProvider();\nfirebase.auth().signInWithRedirect(provider).then(function (result) {\n  // This gives you a Google Access Token. You can use it to access the Google API.\n  var token = result.credential.accessToken; // The signed-in user info.\n\n  var user = result.user; //console.log(user);\n  // ...\n}).catch(function (error) {\n  // Handle Errors here.\n  var errorCode = error.code;\n  var errorMessage = error.message; // The email of the user's account used.\n\n  var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n  var credential = error.credential; // ...\n}); // //var user = firebase.auth().currentUser;\n// var name, email;\n//\n//\n// firebase.auth().useDeviceLanguage();\n// firebase.auth().onAuthStateChanged(function(user){\n//\n// \tif(user != null){\n// \t\tname = user.displayName;\n// \t\temail = user.email;\n// \t\talert(name + ': ' + email);\n// \t}\n// \telse{\n// \t\talert('Working on Redirect for initial log in');\n// \t\tfirebase.auth.signinWithRedirect(provider);\n// \t\tfirebase.auth().getRedirectResult().then(function(result) {\n// \t\t\tif (result.credential) {\n// \t\t\t\t//This gives you a Google Access Token.\n// \t\t\t\t//var token = result.credential.accessToken;\n// \t\t\t}\n// \t\t\tuser = result.user;\n// \t\t}).catch(function(error) {\n// \t\t\t\t// Handle Errors here.\n// \t\t\t\tvar errorCode = error.code;\n// \t\t\t\tvar errorMessage = error.message;\n// \t\t\t\t// The email of the user's account used.\n// \t\t\t\tvar errorEmail = error.email;\n// \t\t\t\t// The firebase.auth.AuthCredential type that was used.\n// \t\t\t\tvar credential = error.credential;\n//\n// \t\t\t\t//Output line for error variables to silence unused var warnings\n// \t\t\t\talert(errorCode + errorMessage + errorEmail + credential);\n// \t\t});\n// \t}\n// });","map":{"version":3,"sources":["/home/daniel/booked/Booked/src/firebase.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","provider","auth","GoogleAuthProvider","signInWithRedirect","then","result","token","credential","accessToken","user","catch","error","errorCode","code","errorMessage","message","email"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,UAA1B;AACA,OAAO,eAAP,C,CACA;;AAEA,IAAIC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,8BAFD;AAGXC,EAAAA,WAAW,EAAE,qCAHF;AAIXC,EAAAA,SAAS,EAAE,cAJA;AAKXC,EAAAA,aAAa,EAAE,0BALJ;AAMXC,EAAAA,iBAAiB,EAAE,aANR;AAOXC,EAAAA,KAAK,EAAE,0CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAb;AAWAT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AAEA,IAAIU,QAAQ,GAAG,IAAIX,QAAQ,CAACY,IAAT,CAAcC,kBAAlB,EAAf;AACAb,QAAQ,CAACY,IAAT,GAAgBE,kBAAhB,CAAmCH,QAAnC,EAA6CI,IAA7C,CAAkD,UAASC,MAAT,EAAiB;AACjE;AACA,MAAIC,KAAK,GAAGD,MAAM,CAACE,UAAP,CAAkBC,WAA9B,CAFiE,CAGjE;;AACA,MAAIC,IAAI,GAAGJ,MAAM,CAACI,IAAlB,CAJiE,CAKjE;AACA;AACD,CAPD,EAOGC,KAPH,CAOS,UAASC,KAAT,EAAgB;AACvB;AACA,MAAIC,SAAS,GAAGD,KAAK,CAACE,IAAtB;AACA,MAAIC,YAAY,GAAGH,KAAK,CAACI,OAAzB,CAHuB,CAIvB;;AACA,MAAIC,KAAK,GAAGL,KAAK,CAACK,KAAlB,CALuB,CAMvB;;AACA,MAAIT,UAAU,GAAGI,KAAK,CAACJ,UAAvB,CAPuB,CAQvB;AACD,CAhBD,E,CAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import * as firebase from 'firebase';\nimport 'firebase/auth';\n//export var user;\n\nvar config = {\n  apiKey: \"AIzaSyAbrPremBQusjYoKqKfTcVHwxuw-Q8ikHw\",\n  authDomain: \"booked-8586e.firebaseapp.com\",\n  databaseURL: \"https://booked-8586e.firebaseio.com\",\n  projectId: \"booked-8586e\",\n  storageBucket: \"booked-8586e.appspot.com\",\n  messagingSenderId: \"24720035765\",\n  appId: \"1:24720035765:web:3d57fd5c840b8100c353fc\",\n  measurementId: \"G-20QKEY7V1D\"\n};\n\nfirebase.initializeApp(config);\n\nvar provider = new firebase.auth.GoogleAuthProvider();\nfirebase.auth().signInWithRedirect(provider).then(function(result) {\n  // This gives you a Google Access Token. You can use it to access the Google API.\n  var token = result.credential.accessToken;\n  // The signed-in user info.\n  var user = result.user;\n  //console.log(user);\n  // ...\n}).catch(function(error) {\n  // Handle Errors here.\n  var errorCode = error.code;\n  var errorMessage = error.message;\n  // The email of the user's account used.\n  var email = error.email;\n  // The firebase.auth.AuthCredential type that was used.\n  var credential = error.credential;\n  // ...\n});\n\n// //var user = firebase.auth().currentUser;\n// var name, email;\n//\n//\n// firebase.auth().useDeviceLanguage();\n// firebase.auth().onAuthStateChanged(function(user){\n//\n// \tif(user != null){\n// \t\tname = user.displayName;\n// \t\temail = user.email;\n// \t\talert(name + ': ' + email);\n// \t}\n// \telse{\n// \t\talert('Working on Redirect for initial log in');\n// \t\tfirebase.auth.signinWithRedirect(provider);\n// \t\tfirebase.auth().getRedirectResult().then(function(result) {\n// \t\t\tif (result.credential) {\n// \t\t\t\t//This gives you a Google Access Token.\n// \t\t\t\t//var token = result.credential.accessToken;\n// \t\t\t}\n// \t\t\tuser = result.user;\n// \t\t}).catch(function(error) {\n// \t\t\t\t// Handle Errors here.\n// \t\t\t\tvar errorCode = error.code;\n// \t\t\t\tvar errorMessage = error.message;\n// \t\t\t\t// The email of the user's account used.\n// \t\t\t\tvar errorEmail = error.email;\n// \t\t\t\t// The firebase.auth.AuthCredential type that was used.\n// \t\t\t\tvar credential = error.credential;\n//\n// \t\t\t\t//Output line for error variables to silence unused var warnings\n// \t\t\t\talert(errorCode + errorMessage + errorEmail + credential);\n// \t\t});\n// \t}\n// });\n"]},"metadata":{},"sourceType":"module"}