{"ast":null,"code":"var _jsxFileName = \"/home/daniel/booked/Booked/src/App.js\";\nimport React from 'react';\nimport Home from \"./Home\"; //import * as firebase from 'firebase';\n//import CalApp from './calApp';\n//import './main.css';\n//import './firebase.js';\n//start router code////////\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nconst App = () => {\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: Home,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }), \"//\", /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/calender\",\n    component: Calender,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }), \"//\", /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: Home,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default app; //app lower in app.js upper in firebase\n// export default function BasicExample() {\n//   return (\n//     <Router>\n//       <div>\n//         <ul>\n//           <li>\n//             <Link to=\"/\">Home</Link>\n//           </li>\n//           <li>\n//             <Link to=\"/calender\">Calender</Link>\n//           </li>\n//         </ul>\n//\n//         <hr />\n//\n//         {/*\n//           A <Switch> looks through all its children <Route>\n//           elements and renders the first one whose path\n//           matches the current URL. Use a <Switch> any time\n//           you have multiple routes, but you want only one\n//           of them to render at a time\n//         */}\n//         <Switch>\n//           <Route exact path=\"/\">\n//             <TodoApp />\n//           </Route>\n//           <Route path=\"/calender\">\n//             <CalApp />\n//           </Route>\n//         </Switch>\n//\n//       </div>\n//     </Router>\n//   );\n// }\n///////////end router test//////////////////\n// class TodoApp extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { items: [], text: '' };\n//     this.handleChange = this.handleChange.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n//\n//   componentDidMount() {\n//     const itemsRef = firebase.database().ref('text');\n//     itemsRef.on('value', (snapshot) => {\n//       let items = snapshot.val();\n//       let newState = [];\n//       for (let item in items) {\n//         newState.push({\n//           id: items[item].id,\n//           text: items[item].text,\n//         });\n//       }\n//       this.setState({\n//         items: newState\n//       });\n//     });\n//   }\n//\n//   status(){\n//     firebase.auth().onAuthStateChanged(function(user){\n//       if(user)\n//       {\n//         console.log(\"currently signed in\");\n//         firebase.auth().signOut();\n//       }\n//       else\n//       {\n//         console.log(\"not signed in\");\n//         // var provider = new firebase.auth.GoogleAuthProvider();\n//         // firebase.auth().signInWithPopup(provider);\n//       }\n//     });\n//   }\n//\n//   render() {\n//     let button = <button onClick={this.status}>TEST</button>\n//\n//     return (\n//       <div>\n//         {button}\n//         <h3>TODO</h3>\n//         <TodoList items={this.state.items} />\n//         <form onSubmit={this.handleSubmit}>\n//           <label htmlFor=\"new-todo\">\n//             What needs to be done?\n//           </label>\n//           <input\n//             id=\"new-todo\"\n//             onChange={this.handleChange}\n//             value={this.state.text}\n//           />\n//           <button>\n//             Add #{this.state.items.length + 1}\n//           </button>\n//         </form>\n//       </div>\n//\n//     );\n//   }\n//\n//   handleChange(e) {\n//     this.setState({ text: e.target.value });\n//   }\n//\n//   handleSubmit(e) {\n//     e.preventDefault();\n//     if (this.state.text.length === 0) {\n//       return;\n//     }\n//     const itemsRef = firebase.database().ref('text');\n//     const newItem = {\n//       text: this.state.text,\n//       id: Date.now()\n//     };\n//     itemsRef.push(newItem);\n// //    this.setState(state => ({\n// //      items: state.items.concat(newItem),\n// //      text: ''\n// //    }));\n//   }\n// }\n//\n// class TodoList extends React.Component {\n//   render() {\n//     return (\n//       <ul>\n//         {this.props.items.map(item => (\n//           <li key={item.id}>{item.text}</li>\n//         ))}\n//       </ul>\n//     );\n//   }\n// }","map":{"version":3,"sources":["/home/daniel/booked/Booked/src/App.js"],"names":["React","Home","BrowserRouter","Router","Switch","Route","Link","App","Calender","app"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CACA;AACA;AACA;AACA;AAEA;;AACA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,IAJF,QAKO,kBALP;;AAOA,MAAMC,GAAG,GAAG,MAAM;AAChB,sBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAsB,IAAA,SAAS,EAAEN,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,qBAEI,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,WAAlB;AAA8B,IAAA,SAAS,EAAEO,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,qBAGI,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAsB,IAAA,SAAS,EAAEP,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADF,CADF;AASD,CAVD;;AAYA,eAAeQ,GAAf,C,CAAmB;AAEnsourcesContent":["import React from 'react';\nimport Home from \"./Home\";\n//import * as firebase from 'firebase';\n//import CalApp from './calApp';\n//import './main.css';\n//import './firebase.js';\n\n//start router code////////\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={Home} />\n        //<Route exact path=\"/calender\" component={Calender} />\n        //<Route exact path=\"/\" component={Home} />\n      </div>\n    </Router>\n  );\n};\n\nexport default app;//app lower in app.js upper in firebase\n\n// export default function BasicExample() {\n//   return (\n//     <Router>\n//       <div>\n//         <ul>\n//           <li>\n//             <Link to=\"/\">Home</Link>\n//           </li>\n//           <li>\n//             <Link to=\"/calender\">Calender</Link>\n//           </li>\n//         </ul>\n//\n//         <hr />\n//\n//         {/*\n//           A <Switch> looks through all its children <Route>\n//           elements and renders the first one whose path\n//           matches the current URL. Use a <Switch> any time\n//           you have multiple routes, but you want only one\n//           of them to render at a time\n//         */}\n//         <Switch>\n//           <Route exact path=\"/\">\n//             <TodoApp />\n//           </Route>\n//           <Route path=\"/calender\">\n//             <CalApp />\n//           </Route>\n//         </Switch>\n//\n//       </div>\n//     </Router>\n//   );\n// }\n\n///////////end router test//////////////////\n// class TodoApp extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { items: [], text: '' };\n//     this.handleChange = this.handleChange.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n//\n//   componentDidMount() {\n//     const itemsRef = firebase.database().ref('text');\n//     itemsRef.on('value', (snapshot) => {\n//       let items = snapshot.val();\n//       let newState = [];\n//       for (let item in items) {\n//         newState.push({\n//           id: items[item].id,\n//           text: items[item].text,\n//         });\n//       }\n//       this.setState({\n//         items: newState\n//       });\n//     });\n//   }\n//\n//   status(){\n//     firebase.auth().onAuthStateChanged(function(user){\n//       if(user)\n//       {\n//         console.log(\"currently signed in\");\n//         firebase.auth().signOut();\n//       }\n//       else\n//       {\n//         console.log(\"not signed in\");\n//         // var provider = new firebase.auth.GoogleAuthProvider();\n//         // firebase.auth().signInWithPopup(provider);\n//       }\n//     });\n//   }\n//\n//   render() {\n//     let button = <button onClick={this.status}>TEST</button>\n//\n//     return (\n//       <div>\n//         {button}\n//         <h3>TODO</h3>\n//         <TodoList items={this.state.items} />\n//         <form onSubmit={this.handleSubmit}>\n//           <label htmlFor=\"new-todo\">\n//             What needs to be done?\n//           </label>\n//           <input\n//             id=\"new-todo\"\n//             onChange={this.handleChange}\n//             value={this.state.text}\n//           />\n//           <button>\n//             Add #{this.state.items.length + 1}\n//           </button>\n//         </form>\n//       </div>\n//\n//     );\n//   }\n//\n//   handleChange(e) {\n//     this.setState({ text: e.target.value });\n//   }\n//\n//   handleSubmit(e) {\n//     e.preventDefault();\n//     if (this.state.text.length === 0) {\n//       return;\n//     }\n//     const itemsRef = firebase.database().ref('text');\n//     const newItem = {\n//       text: this.state.text,\n//       id: Date.now()\n//     };\n//     itemsRef.push(newItem);\n// //    this.setState(state => ({\n// //      items: state.items.concat(newItem),\n// //      text: ''\n// //    }));\n//   }\n// }\n//\n// class TodoList extends React.Component {\n//   render() {\n//     return (\n//       <ul>\n//         {this.props.items.map(item => (\n//           <li key={item.id}>{item.text}</li>\n//         ))}\n//       </ul>\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}